sb or sp# open a buffer number in a horizontal split
gx open url under cursor :)
gn visuall select the highlight match
:t 
:pu(!) to paste to the line below/above this line
]p [p to auto indent pasted line, e.g. yy]p
gq " formating: set textwidth to 80 and gggqG will format the whole file to cut it to 80
<C-X><C-L>
guu
]I [I   list highlight
zz
<C-o> in insert mode drop you into one off normal command
gn/gN: action on next match: cgn dgn
10% goto 10% of file

Folding(z)
	M R
	m r
	c o
	C O
	a A
	j k    move to next/prev fold
	zMzv   close others except cursor
	

CTRL-W

	o
	_ |
	+ -
	> <
	p
	HJKL
	t b

GETTING BACK TO WHERE YOU STOPPED VIM

	You are halfway editing a file and it's time to leave for holidays.  You exit
	Vim and go enjoy yourselves, forgetting all about your work.  After a couple
	of weeks you start Vim, and type:
	>
		'0

	And you are right back where you left Vim.  So you can get on with your work.
	   Vim creates a mark each time you exit Vim.  The last one is '0.  The
	position that '0 pointed to is made '1.  And '1 is made to '2, and so forth.
	Mark '9 is lost.
	   The |:marks| command is useful to find out where '0 to '9 will take you.



SESSIONS AND VIMINFO

	Sessions store many things, but not the position of marks, contents of
	registers and the command line history.  You need to use the viminfo feature
	for these things.
	   In most situations you will want to use sessions separately from viminfo.
	This can be used to switch to another session, but keep the command line
	history.  And yank text into registers in one session, and paste it back in
	another session.
	   You might prefer to keep the info with the session.  You will have to do
	this yourself then.  Example: >

		:mksession! ~/.vim/secret.vim
		:wviminfo! ~/.vim/secret.viminfo

	And to restore this again: >

		:source ~/.vim/secret.vim
		:rviminfo! ~/.vim/secret.viminfo
