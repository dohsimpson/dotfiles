""" basic
"" Remove ALL autocommands for the current group.
autocmd!
set nocompatible
filetype plugin on
runtime macros/matchit.vim
syntax on
set number relativenumber
set nrformats=hex,alpha
set hidden
set title " set terminal window title
set directory=~/.vim/swp,.
set lazyredraw

""" scroll (faster)
set scrolloff=3
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

""" use ',' as mapleader
let mapleader = ","

""" pathogen
execute pathogen#infect()
execute pathogen#helptags()

""" source other vimrc files
source $HOME/.vim/plugvimrc
source $HOME/.vim/abbrvimrc
source $HOME/.vim/tempvimrc
source $HOME/.vim/colorvimrc

""" status line
set laststatus=2
" set statusline=%<%f\ %h%m%r%=[%l/%L]\ %q%y\ %%%p

""" autocomplete
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp

""" enable mouse
set mouse=a

""" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

""" history
set history=1000
set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000
set autoread
set autowrite

""" mapleader mapping
nnoremap <leader>vcp :edit $HOME/.vim/plugvimrc<CR>
nnoremap <leader>vsp :source $HOME/.vim/plugvimrc<CR>
nnoremap <leader>vct :edit $HOME/.vim/tempvimrc<CR>
nnoremap <leader>vst :source $HOME/.vim/tempvimrc<CR>
nnoremap <leader>vcc :edit $MYVIMRC<CR>
nnoremap <leader>vsc :source $MYVIMRC<CR>

""" search
"" change grep to ack/ag
" if executable("ag")
"   set grepprg=ag\ --nogroup\ --column\ $*
"   set grepformat=%f:%l:%c:%m
" elseif executable("ack")
"   set grepprg=ack\ --nogroup\ --column\ $*
"   set grepformat=%f:%l:%c:%m
" endif
set hlsearch incsearch ignorecase smartcase
nnoremap <leader>nh :nohlsearch<CR>
nnoremap <leader>hl :set hlsearch<CR>
nnoremap <leader>hc :%s///gn<CR>
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

""" indent
set smartindent

""" diff
set diffopt+=vertical
command! DiffOriginal call s:DiffOriginal()

""" subsititue
nnoremap & :&&<CR>
xnoremap & :&&<CR>

""" argument list
nnoremap <silent> <leader>a :args<CR>
nnoremap <silent> [a :previous<CR>
nnoremap <silent> ]a :next<CR>
nnoremap <silent> [A :first<CR>
nnoremap <silent> ]A :last<CR>

""" tag list
"nnoremap <silent> <leader>t :tselect<CR>
nnoremap <silent> [t :tprevious<CR>
nnoremap <silent> ]t :tnext<CR>
nnoremap <silent> [T :tfirst<CR>
nnoremap <silent> ]T :tlast<CR>

""" buffer list
nnoremap <silent> <leader>b :ls<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

""" location list
nnoremap <silent> <leader>l :lopen<CR>
nnoremap <silent> [l :lprevious<CR>
nnoremap <silent> ]l :lnext<CR>
nnoremap <silent> [L :lfirst<CR>
nnoremap <silent> ]L :llast<CR>

""" quickfix list
nnoremap <silent> <leader>q :copen<CR>
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [Q :cfirst<CR>
nnoremap <silent> ]Q :clast<CR>
command! -nargs=0 -bar Qargs execute 'args' <SID>QuickfixFilenames()
command! Coldest :colder 1000<CR> " is that cold enough for ya?
command! Cnewest :cnewer 1000<CR>

""" window
nnoremap ` <C-w>
nnoremap `` <C-w>p

""" session
command! LoadSession call <SID>LoadSession()
command! SaveSession call <SID>SaveSession()

""" autocmd
"" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
"auto reload .vimrc
autocmd BufWritePost .vimrc source %
"" filetype specific
if has("autocmd")
	filetype on
	autocmd FileType vim set keywordprg= ts=2 sts=2 sw=2 et
	autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et
	autocmd FileType python setlocal ts=4 sts=4 sw=4 et
	autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noet
	autocmd FileType c setlocal ts=4 sts=4 sw=4 et
	autocmd FileType help setlocal et
	autocmd FileType help nnoremap <buffer> <CR> <C-]>
endif

""" function definitions
"" visual search word under cursor
function! s:VSetSearch()
	let temp = @s
	norm! gv"sy
	let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
	let @s = temp
endfunction
"" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! s:DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
function! s:LoadSession()
perl << EOD
use Digest::MD5 qw(md5_hex);
use Cwd;
my $session_md5_hash = md5_hex(cwd());
my $session_path = "$ENV{HOME}/.vim/sessions/$session_md5_hash.session";
if (-e $session_path) {
  VIM::DoCommand("source $session_path");
  VIM::DoCommand("echo \"Session loaded from: $session_path\"");
  }
else {
  VIM::DoCommand("echo \"[!] No session for current directory\"");
  }
EOD
endfunction
function! s:SaveSession()
perl << EOD
use Digest::MD5 qw(md5_hex);
use Cwd;
my $session_md5_hash = md5_hex(cwd());
my $session_path = "$ENV{HOME}/.vim/sessions/$session_md5_hash.session";
VIM::DoCommand("mksession! $session_path");
VIM::DoCommand("echo \"Session saved to: $session_path\"");
EOD
endfunction
function! s:QuickfixFilenames()
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
function! s:DiffOriginal()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

""" use local .vimrc
set exrc
set secure

""" personal mappings
"imap jk <ESC> " very cool but i use caps lock as both esc and ctrl
noremap \ :
noremap : ,
nnoremap q\ q:
noremap Y y$
noremap ' `
" noremap ` '  " see mapping for window
noremap 0 ^
noremap _ 0
"" default search to very magic
" nnoremap / /\v
" vnoremap / /\v
noremap <leader><leader>p :put +<CR>
noremap <leader><leader>P :.-1put +<CR>
noremap <leader>p "+p
noremap <leader>P "+P
vnoremap Y "+y
vnoremap P "+p
noremap <silent> <leader>. :nohlsearch<CR>
noremap zv zMzv
noremap zV zMzvzc
nnoremap - :bd<CR>
nnoremap do do]c
nnoremap dp dp]c
"" mapping used by iTerm
noremap <C-h> <Nop>
noremap <C-j> <Nop>
noremap <C-k> <Nop>
noremap <C-l> <Nop>
noremap <C-Tab> <Nop>
noremap <C-S-Tab> <Nop>

""" personal commands
command! Filepath echo expand('%:p')
command! So update | source %
command! DeleteTrailingWS call <SID>DeleteTrailingWS()
