""" pathogen
" execute pathogen#infect()
" execute pathogen#helptags()

""" vim-plug
let complete_these_ = ['python', 'java', 'vim', 'c', 'c++', 'cpp', 'ruby', 'txt', 'sh', 'markdown', 'html', 'css', 'sql', 'javascript', 'haskell', 'plaintex']
let javascript_ft = ['javascript', 'javascript.jsx']
let easy_grep_on_demand_ = [
      \ "<Plug>EgMapReplaceSelection_R",
      \ "<Plug>EgMapReplaceCurrentWord_R",
      \ "<Plug>EgMapReplaceSelection_r",
      \ "<Plug>EgMapReplaceCurrentWord_r",
      \ "<Plug>EgMapGrepSelection_V",
      \ "<Plug>EgMapGrepCurrentWord_V",
      \ "<Plug>EgMapGrepSelection_v",
      \ "<Plug>EgMapGrepCurrentWord_v",
      \ "<Plug>EgMapGrepOptions",
      \ "Grep"
      \ ]
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'jlfwong/vim-mercenary'
Plug 'tpope/vim-eunuch'
" Plug 'tpope/vim-rsi' " this produce wired behaviour when escape from insert
" Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-scriptease', {'on': 'ScriptEase'}
Plug 'kien/ctrlp.vim' " don't use `on` otherwise CtrlP UI display badly
" Plug 'FelikZ/ctrlp-py-matcher' " doesn't work anymore
Plug 'bling/vim-airline', {'commit': '67de5f2', 'frozen': 1}
Plug 'vim-airline/vim-airline-themes'
Plug 'mbbill/undotree', {'on': 'UndotreeToggle'}
" Plug 'wellle/targets.vim'
" Plug 'rhysd/clever-f.vim'
Plug 'rbgrouleff/bclose.vim', {'on': 'Bclose'}
" Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/vim-easy-align', {'on': '<Plug>(EasyAlign)'}
Plug 'junegunn/goyo.vim', {'on': 'Goyo'}
" Plug 'junegunn/seoul256.vim'
" Plug 'mhinz/vim-startify'
Plug 'ervandew/supertab'
Plug 'Lokaltog/vim-easymotion'
Plug 'dohsimpson/vim-macroeditor', {'on': 'MacroEdit'}
Plug 'vim-scripts/BufOnly.vim', {'on': 'BufOnly'}
Plug '~/.vim/plugged/vim-easygrep', {'on': easy_grep_on_demand_}
" programming languages
Plug 'scrooloose/syntastic', {'for': complete_these_}
Plug 'majutsushi/tagbar', {'for': complete_these_}
Plug 'dohsimpson/vim-snipmate' | Plug 'MarcWeber/vim-addon-mw-utils' | Plug 'tomtom/tlib_vim'
Plug 'nathanaelkane/vim-indent-guides', {'for': complete_these_}
Plug 'michaeljsmith/vim-indent-object', {'for': complete_these_}
Plug 'fs111/pydoc.vim', {'for': 'python'}
Plug 'othree/html5.vim', {'for': 'html'}
Plug 'ap/vim-css-color', {'for': 'css'}
Plug 'pangloss/vim-javascript', {'for': javascript_ft}
Plug 'othree/javascript-libraries-syntax.vim', {'for': javascript_ft}
" miscellaneous
" Plug 'mjbrownie/browser.vim', {'on': 'WebBrowser'}
Plug 'scrooloose/nerdtree', {'on': ['NERDTree']}
" testing
Plug 'hynek/vim-python-pep8-indent', {'for': 'python'}
" Plug 'tpope/vim-dispatch'
" Plug 'rizzatti/dash.vim', {'for': complete_these_}
Plug 'tpope/vim-vinegar'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-speeddating'
Plug 'justinmk/vim-gtfo'
Plug '~/.vim/plugged/python-make', {'for': 'python'}
Plug 'alfredodeza/pytest.vim', {'for': 'python', 'on': 'Pytest'}
Plug 'reinh/vim-makegreen', {'for': complete_these_}
Plug '~/.vim/plugged/python-mode-extracted', {'for': 'python'}
" Plug '5long/pytest-vim-compiler', {'for': 'python'}
Plug 'rking/ag.vim', {'on': 'Ag'}
Plug 'AndrewRadev/linediff.vim', {'on': 'Linediff'}
Plug 'AndrewRadev/switch.vim', {'on': 'Switch'}
Plug 'AndrewRadev/sideways.vim'
" Plug 'AndrewRadev/writable_search.vim'
Plug 'stefandtw/quickfix-reflector.vim'
" Plug 'myusuf3/numbers.vim'
Plug 'vim-scripts/gitignore.vim'
" Plug 'vim-scripts/django.vim', {'for': 'html'} " syntax for django templates
Plug 'vim-scripts/indentpython.vim', {'for': 'python'}
Plug 'mattn/emmet-vim', {'for': [ 'html', 'htmldjango', 'css' ]}
Plug 'chrisbra/vim-diff-enhanced', {'on': 'EnhancedDiff'}
Plug 'christoomey/vim-tmux-navigator'
" Plug 'spiiph/vim-space'
Plug 'ekalinin/Dockerfile.vim', {'for': 'Dockerfile'}
Plug 'kana/vim-textobj-user'
Plug 'tpope/vim-markdown', {'for': 'markdown'}
" Plug 'thinca/vim-ref'
Plug 'thinca/vim-quickrun', {'for': complete_these_}
Plug 'benmills/vimux'
Plug 'leshill/vim-json', {'for': 'json'}
" Plug 'hdima/python-syntax'
Plug 'chrisbra/NrrwRgn'
" nginx syntax highlighting
Plug 'evanmiller/nginx-vim-syntax'
Plug 'tpope/vim-capslock'
Plug 'vim-scripts/sql.vim--Stinson'
Plug 'vim-scripts/taglist.vim'
Plug 'kana/vim-textobj-user', {'for': complete_these_}
Plug 'Julian/vim-textobj-variable-segment', {'for': complete_these_}
" Plug 'Raimondi/delimitMate', {'for': complete_these_}
" Plug 'Raimondi/delimitMate'
" Plug 'rainerborene/vim-timetap'
" Plug 'bitc/vim-hdevtools', {'for': 'haskell'}
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'eagletmt/ghcmod-vim', {'for': 'haskell'}
Plug 'eagletmt/neco-ghc', {'for': 'haskell'}
" Plug 'neovimhaskell/haskell-vim', {'for': 'haskell'}
Plug 'Twinside/vim-hoogle', {'for': 'haskell'}
" Plug 'kien/rainbow_parentheses.vim', {'for': 'haskell'}
Plug 'travitch/hasksyn', {'for': 'haskell'}
Plug 'jszakmeister/vim-togglecursor'
" Plug 'vim-scripts/YankRing.vim'  " unnecessarily maps so much essential keys
Plug 'tpope/vim-tbone'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug '~/.vim/plugged/vim-dirdiff'
Plug 'chun-yang/vim-action-macro'
Plug 'rizzatti/dash.vim'
Plug 'vimwiki/vimwiki'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-obsession'
Plug 'vim-scripts/Add-to-Word-Search'
Plug 'mattn/webapi-vim'
Plug 'Valloric/MatchTagAlways', {'for': 'html'}
Plug 'mattboehm/vim-unstack'
Plug 'Glench/Vim-Jinja2-Syntax'
" Plug 'yhat/vim-docstring'
" Plug 'pearofducks/ansible-vim', {'for': 'yaml', 'do': 'cd ./UltiSnips; python2 generate.py'}
Plug 'phenomenes/ansible-snippets'
" Plug 'juliosueiras/vim-terraform-completion', {'for': 'terraform'}
Plug 'hashivim/vim-terraform', {'for': 'terraform'}
" Plug 'Shougo/deoplete.nvim'
" Plug 'roxma/nvim-yarp'
" Plug 'roxma/vim-hug-neovim-rpc'
" Plug 'Shougo/neco-syntax'
" Plug 'zchee/deoplete-jedi'
" Plug 'tpope/vim-ragtag'
"" frontend
" html
Plug 'alvan/vim-closetag'
" vue
Plug 'posva/vim-vue'
" react
" Plug 'mxw/vim-jsx'
Plug 'justinj/vim-react-snippets'
" js others
Plug 'kchmck/vim-coffee-script', {'for': 'coffee'}
Plug 'leafgarland/typescript-vim'
Plug 'jbgutierrez/vim-babel'
call plug#end()

""" basic
"" Remove ALL autocommands for the current group.
autocmd!
set nocompatible
" filetype indent plugin on " this is already turned on by vim-sensible
filetype plugin on " this is already turned on by vim-sensible
runtime macros/matchit.vim
syntax on
set number
set relativenumber
set nrformats=hex,alpha
set hidden
set title " set terminal window title
set titleold=
set directory=~/.vim/swp,.
set lazyredraw
set ts=4 sts=4 sw=4 et
set shortmess=at
set shell=/bin/bash
set noswapfile

""" fold
set foldlevel=99

""" scroll (faster)
set scrolloff=3

""" use ',' as mapleader
let mapleader = ","
" let maplocalleader = "`"

""" source other vimrc files
source $HOME/.vim/plugvimrc
source $HOME/.vim/abbrvimrc
source $HOME/.vim/tempvimrc
source $HOME/.vim/colorvimrc

""" status line
set laststatus=2
" set statusline=%<%f\ %h%m%r%=[%l/%L]\ %q%y\ %%%p

""" cursor position
set cursorcolumn

""" autocomplete
set wildignore+=*.a,*.o
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
set wildignore+=.DS_Store,.git,.hg,.svn
set wildignore+=*~,*.swp,*.tmp
set wildignore+=*.pyc,*.pyo
set wildignore+=*.po

""" enable mouse
set mouse+=a
if &term =~ '^screen'
    " tmux knows the extended mouse mode
    set ttymouse=xterm2
endif

""" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

""" history
set history=1000
set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000
set autoread
set autowrite

""" mapleader mapping
nnoremap <leader>vcp :edit $HOME/.vim/plugvimrc<CR>
nnoremap <leader>vsp :source $HOME/.vim/plugvimrc<CR>
nnoremap <leader>vct :edit $HOME/.vim/tempvimrc<CR>
nnoremap <leader>vst :source $HOME/.vim/tempvimrc<CR>
nnoremap <leader>vca :edit $HOME/.vim/abbrvimrc<CR>
nnoremap <leader>vcc :edit $MYVIMRC<CR>
nnoremap <leader>vsc :source $MYVIMRC<CR>
nnoremap <leader>vcf :Ex $HOME/.vim/after/ftplugin<CR>

""" search(grep)
" "" change grep to ack/ag if possible
" if executable("ag")
"   set grepprg=ag\ --vimgrep
"   set grepformat="%f:%l:%c:%m"
" " elseif executable("ack")
" "   set grepprg=ack\ --nogroup\ --column\ $*
" "   set grepformat=%f:%l:%c:%m
" endif
set hlsearch incsearch ignorecase smartcase
nnoremap <leader>nh :nohlsearch<CR>
nnoremap <leader>hl :set hlsearch<CR>
nnoremap <leader>hc :%s///gn<CR>
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>

""" indent
set smartindent

""" diff
set diffopt+=vertical
command! DiffOriginal call s:DiffOriginal()

""" subsititue
nnoremap & :&&<CR>
xnoremap & :&&<CR>

""" argument list
nnoremap <silent> <leader>a :args<CR>
nnoremap <silent> [a :previous<CR>
nnoremap <silent> ]a :next<CR>
nnoremap <silent> [A :first<CR>
nnoremap <silent> ]A :last<CR>

""" tab list
nnoremap <silent> <leader>t :tabs<CR>
nnoremap <silent> [t gT
nnoremap <silent> ]t gt
nnoremap <silent> [T :tabfirst<CR>
nnoremap <silent> ]T :tablast<CR>
nnoremap <silent> >T :tabmove +
nnoremap <silent> <T :tabmove -
" nnoremap <silent> T :tabnew<CR>
nnoremap <silent> T :tabe %<CR>

""" tag list
nnoremap <silent> <leader>u :tselect<CR>
nnoremap <silent> [u :tprevious<CR>
nnoremap <silent> ]u :tnext<CR>
nnoremap <silent> [U :tfirst<CR>
nnoremap <silent> ]U :tlast<CR>

""" buffer list
nnoremap <silent> <leader>b :ls<CR>
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

""" location list
nnoremap <silent> <leader>l :lopen<CR>
nnoremap <silent> [l :lprevious<CR>
nnoremap <silent> ]l :lnext<CR>
nnoremap <silent> [L :lfirst<CR>
nnoremap <silent> ]L :llast<CR>

""" quickfix list
nnoremap <silent> <leader>q :copen<CR>
nnoremap <silent> [q :cprevious<CR>
nnoremap <silent> ]q :cnext<CR>
nnoremap <silent> [Q :cfirst<CR>
nnoremap <silent> ]Q :clast<CR>
command! -nargs=0 -bar Qargs execute 'args' <SID>QuickfixFilenames()
" command! Coldest :colder 1000<CR>
" command! Cnewest :cnewer 1000<CR>

""" window
nnoremap ` <C-w>
nnoremap `` <C-^>

""" session
command! LoadSession call <SID>LoadSession()
command! SaveSession call <SID>SaveSession()

""" autocmd
"" remove trailing whitespace on save(caution when editing other's code)
autocmd BufWritePre * :%s/\s\+$//e
autocmd BufWritePre *.sh :silent !chmod +x <afile>
"" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif
"" filetype specific
autocmd FileType vim setlocal keywordprg= ts=2 sts=2 sw=2 et
autocmd FileType ruby setlocal ts=2 sts=2 sw=2 et
autocmd FileType python setlocal ts=4 sts=4 sw=4 et
autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noet
autocmd FileType html setlocal ts=2 sts=2 sw=2 noet
autocmd FileType xhtml setlocal ts=2 sts=2 sw=2 noet
autocmd FileType xml setlocal ts=2 sts=2 sw=2 noet
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 et
autocmd FileType htmldjango setlocal ts=2 sts=2 sw=2 noet
autocmd FileType css setlocal ts=2 sts=2 sw=2 noet
autocmd FileType c setlocal ts=4 sts=4 sw=4 et iskeyword=a-z,A-Z,48-57,_,.,-,>
autocmd FileType help setlocal et
autocmd FileType gitcommit setlocal spell
autocmd FileType markdown setlocal ts=4 sts=4 sw=4 et spell
autocmd FileType haskell setlocal ts=2 sts=2 sw=2 et
autocmd FileType text setlocal ts=4 sts=4 sw=4 noet spell
" autocmd BufNewFile,BufRead .gitignore set filetype=gitignore
autocmd BufNewFile,BufRead crontab.* set nobackup | set nowritebackup " fix crontab -e


""" function definitions
"" visual search word under cursor
function! s:VSetSearch()
	let temp = @s
	norm! gv"sy
	let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
	let @s = temp
endfunction
"" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! s:DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
function! s:LoadSession()
perl << EOD
use Digest::MD5 qw(md5_hex);
use Cwd;
my $session_md5_hash = md5_hex(cwd());
my $session_path = "$ENV{HOME}/.vim/sessions/$session_md5_hash.session";
if (-e $session_path) {
  VIM::DoCommand("source $session_path");
  VIM::DoCommand("echo \"Session loaded from: $session_path\"");
  }
else {
  VIM::DoCommand("echo \"[!] No session for current directory\"");
  }
EOD
endfunction
function! s:SaveSession()
perl << EOD
use Digest::MD5 qw(md5_hex);
use Cwd;
my $session_md5_hash = md5_hex(cwd());
my $session_path = "$ENV{HOME}/.vim/sessions/$session_md5_hash.session";
VIM::DoCommand("mksession! $session_path");
VIM::DoCommand("echo \"Session saved to: $session_path\"");
EOD
endfunction
function! s:QuickfixFilenames()
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction
function! s:DiffOriginal()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
function! s:FilterQuickfixList(bang, pattern)
  let cmp = a:bang ? '!~#' : '=~#'
  call setqflist(filter(getqflist(), "bufname(v:val['bufnr']) " . cmp . " a:pattern"))
endfunction
" QuickFixFilter pattern to filter
" QuickFixFilter! pattern to reverse filter
command! -bang -nargs=1 -complete=file Qfilter call s:FilterQuickfixList(<bang>0, <q-args>)
function! RunCmdRegister(cmd)
  " helper function to register the command to execute to run this buffer
  " run command is a filetype dependent Ex command and should be defined in
  " ftplugin/<some_file_type>.vim
  " Example Usage
  "   RunCmdRegister("!python %")
  execute 'command! -buffer -nargs=* -complete=file Run '.a:cmd.' <args>'
  nnoremap <buffer> <silent> ! :Run<CR>
endfunction
function! OutputSplitWindow(...)
  " this function output the result of the Ex command into a split scratch buffer
  let cmd = join(a:000, ' ')
  echom cmd
  if cmd[0] == '!' " shell command
    let cmd = strpart(cmd, 1)
    let output = system(cmd)
  else
    let temp_reg = @"
    redir @"
    silent! execute cmd
    redir END
    let output = copy(@")
    let @" = temp_reg
  endif
  if empty(output)
    echoerr "no output"
  else
    new
    setlocal buftype=nofile bufhidden=wipe noswapfile nobuflisted
    put! =output
  endif
endfunction
command! -nargs=+ -complete=command Output call OutputSplitWindow(<f-args>)
function! ResizeWindowOperator(type, ...)
  " After using an operator, the cursor is put at the
  " start of the operated text, so I think this is okay.
  let start_line = line('.')
  if a:0
    let end_line = line("'>")
  else
    let end_line = line("']")
  endif
  execute "resize ".(end_line-start_line+1)
  normal! zt
endfunction
nnoremap <silent> zS :set operatorfunc=ResizeWindowOperator<CR>g@
vnoremap <silent> zS :<C-u>call ResizeWindowOperator(visualmode(), 1)<CR>
autocmd VimResized * :wincmd =
function! TodoList()
  " collect TODO, FIXME, XXX into a quickfix list
  silent execute "vimgrep \"TODO\\|FIXME\\|XXX\" " . expand('%')
  copen
endfunction
command! Todo call TodoList()
function! Objective(bang, ...)
  " add new objective to achieve today!
  function! Show()
      for i in range(len(g:objectives))
          let mes = g:objectives[i]
          echo i . '. ' . mes
      endfor
  endfunction
  if !exists("g:objectives")
      let g:objectives = []
  endif
  let user_in = join(a:000, " ")
  if empty(a:bang)
      if empty(user_in)
          call Show()
      else
          call add(g:objectives, user_in)
      endif
  else
      if empty(user_in)
          let g:objectives = []
      elseif str2nr(user_in) || user_in ==# '0'
          call remove(g:objectives, str2nr(user_in))
          call Show()
      else
          call filter(g:objectives, 'v:val !~ "' . user_in . '"')
          call Show()
      endif
  endif
endfunction
command! -bang -nargs=* Objective call Objective('<bang>', <f-args>)

" Zoom / Restore window.
" from http://stackoverflow.com/a/26551079
function! s:ZoomToggle() abort
  if exists('t:zoomed') && t:zoomed
    execute t:zoom_winrestcmd
    let t:zoomed = 0
  else
    let t:zoom_winrestcmd = winrestcmd()
    resize
    vertical resize
    let t:zoomed = 1
  endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> Z :ZoomToggle<CR>

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap <Leader>* :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: OFF'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction


""" use local .vimrc
set exrc
set secure

""" personal mappings
" use <C-c> instead of <Esc> otherwise won't work in commandline mode
" see explain in :h c_<Esc>
" imap df <C-c>
" cmap df <C-c>
" vmap df <C-c>
" omap <BS> <C-c>
noremap \ :
" noremap : ,  " screw up :map command for some reason
nnoremap q\ q:
noremap Y y$
noremap ' `
" noremap ` '  " see mapping for window
noremap 0 ^
noremap ^ 0
"" default search to very magic
" nnoremap / /\v
" vnoremap / /\v
noremap <leader>p "+p
noremap <leader>P "+P
noremap <leader>]p "+]p
noremap <leader>[p "+[p
vnoremap P "+p
noremap <leader>Y "+Y
vnoremap Y "+y
noremap <silent> <leader>. :nohlsearch<CR>
noremap zv zMzv
noremap zV zMzvzc
nnoremap - :Bclose<CR>
nnoremap _ :q<CR>
" nnoremap - :bd<CR>
nnoremap do do]c
nnoremap dp dp]c
nnoremap * *N
nmap vv v$h
noremap Q gQ
noremap <C-d> :q<CR>
noremap <C-w> :w<CR>
" nnoremap <buffer> <CR> <C-]>
"" mapping used by iTerm
noremap <C-h> <Nop>
noremap <C-j> <Nop>
noremap <C-k> <Nop>
noremap <C-l> <Nop>
noremap <C-Tab> <Nop>
noremap <C-S-Tab> <Nop>

""" better visual bindings
" use dot to repeat to each line
" (source: https://danielmiessler.com/study/vim/)
vnoremap . :norm.<CR>
" yand in visual mode does not move cursor to the beginning
" (source: http://stackoverflow.com/questions/3806629/yank-a-region-in-vim-without-the-cursor-moving-to-the-top-of-the-block)
vnoremap y ygv<Esc>

""" personal commands
command! Filepath echo expand('%:p')
command! So update | source %
command! DeleteTrailingWS call <SID>DeleteTrailingWS()
command! Cdd cd %:p:h " cd to the currently opened file's folder
command! -nargs=? New new <args> | on
