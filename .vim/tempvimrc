cnoremap <C-r><C-r> \<<C-r><C-w>\>

inoremap <C-l> <C-x><C-L>
inoremap # <C-v>#

nnoremap <up> <C-u>
nnoremap <down> <C-d>

inoremap <C-BS> <C-w>

noremap <F1> <C-^>

" swap stuff
nmap S <Nop>
nmap Sw diwmzwviwp`zP
nmap SW diWmzWviWp`zP
" nnoremap Ss das
nnoremap Sp dap}p

" jump out of bracket quickly
" source: http://stackoverflow.com/questions/11037825/vim-get-out-of-parenthesis-brackets-etc
inoremap <C-e> <C-o>A
nnoremap <C-e> A

" never map <BS>! they are often mis-typed in transition from insert to normal
" nnoremap <BS> g;
nnoremap <BS> <Nop>

cnoremap %% <C-r>=expand('%:h').'/'<CR>
noremap ,, <C-^>

" function! NextIndentation(level, direction)
"   " level is an integer indicate which level to stop(0: same level,
"   " 1: 1 more indent, -1: 1 less indent, etc.)
"   " direction is either 1 or -1(1: down, -1: up)
"   let current_ind = indent(line('.'))
"   let indent_space = &tabstop
"   let seeking_indent = current_ind + (indent_space * a:level)
"   if current_ind == -1
"     throw "Failure getting indentation for current line"
"   endif
"   if a:direction == -1
"     let c = line('.')
"     while c > line('0')
"       let c -= 1
"       if indent(c) == seeking_indent && getline(c) !~# "^[\s\t]*$"
"         exe "normal! " . c . "gg"
"         break
"       endif
"     endwhile
"   elseif a:direction == 1
"     let c = line('.')
"     while c < line('$')
"       let c += 1
"       if indent(c) == seeking_indent && getline(c) !~# "^[\s\t]*$"
"         exe "normal! " . c . "gg"
"         break
"       endif
"     endwhile
"   endif
" endfunction
" nnoremap <silent> <C-9> :call NextIndentation(-1, -1)<CR>
" nnoremap <silent> <C-0> :call NextIndentation(1, 1)<CR>
" nnoremap <silent> ( :call NextIndentation(0, -1)<CR>
" nnoremap <silent> ) :call NextIndentation(0, 1)<CR>

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction
