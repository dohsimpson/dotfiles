#!/bin/bash

# shell shortcuts
alias va="vim ~/.sh_aliases"
alias vrc="vim ~/.vim/vimrc"
alias ta="tmux attach-session -t"
alias tl="tmux list-sessions"
alias tn="tmux new-session -s"
alias tnn="tmux new-session"
alias tan="tmux attach || tmux new"
alias tmux-swap-pane="tmux swap-pane -t"
alias tmux-list-panes='tmux choose-tree -F "#{pane_current_command} #{pane_current_path}"'  # C-s to search, v to toggle preview
alias tmux-reorder-windows='tmux move-window -r'
alias speedtest='wget --output-document=/dev/null http://speedtest.wdc01.softlayer.com/downloads/test500.zip'
alias speedtest2='wget --output-document=/dev/null http://cachefly.cachefly.net/400mb.test' # alternative speedtest
# alias v='vim'
alias vim-none='vim -u NONE -N'
alias vim-hack='vim -u NONE -N -S ~/.vim/hackervimrc'
alias ip2='dig +short myip.opendns.com @resolver1.opendns.com'
alias colors='for code in {0..255}; do echo -e "\e[38;05;${code}m $code: Test"; done'
alias cl='clear'
alias c='cd'
alias tmp='cd /tmp'
alias rl='reload'
alias l='/bin/ls -GFhtr'
alias ls='/bin/ls -GFhtr'
alias s='l'
alias ll='l -l'
alias la='l -a'
alias lla='l -la'
alias lg='ls | grep'
alias ..="cd .."
alias ...="cd ../.."
alias ma='man' # :)
alias pg='ping google.com'
alias pgg='ping 172.217.7.14'
alias httpserver="python -m SimpleHTTPServer"
alias pythonpath='python -c "import sys; print sys.path" | tr "," "\n" | grep -v "egg"'
alias vw='source `which virtualenvwrapper.sh`'
alias sshnohost='ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'
alias scpnohost='scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null'
alias nohist='unset HISTFILE'
alias mnt='mount | column -t'
alias run-as-cron='/usr/bin/env -i $(cat ~/cron-env)'
alias watch='watch ' # Enable aliases to be watched (ref: https://github.com/luksa/dotfiles/blob/master/.aliases)
alias sudo='sudo ' # Enable aliases to be sudo'ed (ref: https://github.com/luksa/dotfiles/blob/master/.aliases)
alias rgg='rg --hidden --no-ignore'

# git alias
alias g='git'
alias cdg='cd "$(git rev-parse --show-toplevel)"' # cd to git root directory
alias gh='git help'
alias gi='git init'
alias gl="git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(blue)%h%C(reset) - %C(green)(%ar)%C(reset) %C(red)%an%C(reset) %C(black)%s%C(reset) %C(bold yellow)%d%C(reset)' "
alias gls="git log --graph --abbrev-commit --decorate --date=local --format=format:'%C(blue)%h%C(reset) - %C(green)(%ad)%C(reset) %C(red)%an%C(reset) %C(black)%s%C(reset) %C(bold yellow)%d%C(reset)' --stat"
alias gll="git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(blue)%h%C(reset) - %C(green)(%ar)%C(reset) %C(red)%an%C(reset) %C(black)%s%C(reset) %C(bold yellow)%d%C(reset)' -p"
alias glf="git log --graph --abbrev-commit --decorate --date=local --format=format:'%C(blue)%h%C(reset) - %C(green)(%ad)%C(reset) %C(red)%an%C(reset) %C(black)%s%C(reset) %C(bold yellow)%d%C(reset)' --stat"
alias gs='git status'
alias ga='git add'
alias gaa='git add -A .'
alias gap='git add -p'
alias gc='git commit'
alias gcam='git commit --amend'
alias gcm='git commit -m'
alias gac='git add . && git commit'
alias gacm='git add . && git commit -m'
alias gps='git push'
alias gpsb='git push -u origin $(git branch --show-current)'
alias gpl='git pull'
alias grs='git reset'
alias grv='git revert'
alias grh='git reset --hard HEAD~1'
alias gb='git branch'
alias gbd='git branch -d'
alias gbD='git branch -D'
alias gco='git checkout'
alias gm='git merge'
alias grb='git rebase'
alias gcl='git clone'
alias gcls='git clone --depth 1'
alias gd='git diff'
alias gdh='git diff "HEAD^1" HEAD'
alias gdiff2='git diff $(git log --pretty=format:%h -2 --reverse | tr "\n" " ")'
alias gundo="git reset 'HEAD~'"

# hg alias (reference: https://github.com/hcgraf/zsh-mercurial)
alias hc='hg commit'
alias hcm='hg commit -m'
alias hb='hg branch'
alias hbs='hg branches'
alias hco='hg checkout -c'
alias hd='hg diff'
alias hdm='hg diffmerge'
alias hi='hg incoming'
alias ho='hg outgoing'
alias hpl='hg pull -u'
alias hps='hg push'
alias hs='hg status'
alias hsm='hg summary'
alias hl='hg log'
alias hrb='hg rollback'
alias hcam='hg qimport -r tip ; hg qrefresh -e ; hg qfinish tip'  # equivalent to git commit --amend
alias hun='hg resolve --list'  # list unmerged files
alias hm='hg merge'
alias hsv='hg shelve'
alias hsvm='hg shelve -m'
alias hsvl='hg shelve --list'
alias husv='hg unshelve'
alias har='hg addremove'
alias ha='hg add'
alias haa='hg add .'
alias hrm='hg remove'
function hmm() {
    hm "$1" && hcm "merge" && echo "commited!"
}

# docker aliases from https://github.com/tcnksm/docker-alias
#alias docker='echo "Use Vagrant Dev docker instead!"'  # temporary when going through the devops book  # TODO remove this line
alias dm="docker-machine"
alias d="docker"
# Get latest container ID
alias dl="docker ps -l -q"
# Get container process
alias dps="docker ps"
# Get process included stop container
alias dpsa="docker ps -a"
alias dvm1="docker volume ls -f dangling=true"
alias dvm2="docker volume ls"
alias dvm3='docker volume rm $(docker volume ls -f dangling=true)'
alias dpa="docker ps -a"
# Get images
alias di="docker images"
# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dr="docker run"
alias drd="docker run -d"
# Run interactive container, e.g., $dki base /bin/bash
alias dri="docker run -it"
alias dr1="docker run -it --rm"
alias de="docker exec --interactive --tty"
alias dstop="docker stop"
# Stop all containers
dstopall() {
    docker stop $(docker ps -a -q)
}
# Stop all containers faster
dkill() {
    docker kill $(docker ps -a -q)
}
# Remove all non-running containers
drm() {
    docker rm $(docker ps -a -q)
}
# Remove all containers
# alias drma='dstop && drm'
# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'
# Remove all dangling images
dcleani() {
    docker rmi $(docker images -q -f dangling=true)
}
# Remove all images
drmi() {
    docker rmi $(docker images -a -q)
}
# Dockerfile build, e.g., $dbu tcnksm/test
dbuild() {
    if [ -z $1 ]; then
        echo "docker build -t=`basename $PWD` ."
        docker build -t=`basename $PWD` .
    else
        echo "docker build -t=$1 ."
        docker build -t=$1 .
    fi
}
# Show all alias related docker
dalias() {
    alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort;
}
# personal
alias dhello="docker run -it --rm -p 80:8000 crccheck/hello-world"
alias dh="docker help"
dbase() {
    eval 'docker run -it --rm $@ devbox'
}
dbasep() {
    eval 'docker run -it $@ devbox'
}
alias dbasev='dbase -v $PWD:/code'
da() {
    docker start $1 && docker attach $1
}
db() {
    docker build -t="$1" .;
}
alias dc="docker-compose"

# Kubernetes
kr1() {
    image="$1"
    shift
    kubectl run -it --rm --restart=Never --image="$image" "tmp-$RANDOM" $*
}

# aws cli alias
alias ec2='aws ec2'
alias s3='aws s3'
alias elb='aws elb'
alias iam='aws iam'
alias rds='aws rds'
alias route53='aws route53'

# Terraform
alias t='terraform'

# Ansible
alias ap='ansible-playbook'

# Defines transfer alias and provides easy command line file and folder sharing.
#
# Authors:
#   Remco Verhoef <remco@dutchcoders.io>
#
transfer() {
    if (( ! $+commands[curl] )); then
        echo "No curl, cannot use function transfer"
    fi
    # check arguments
    if [ $# -eq 0 ];
    then
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s;
    then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e $file ];
        then
            echo "File $file doesn't exists."
            return 1
        fi

        if [ -d $file ];
        then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
            rm -f $zipfile
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
    fi

    # cat output link
    cat $tmpfile

    # cleanup
    rm -f $tmpfile
}

extract () {
    # type in one valid tar command without google
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjf $1        ;;
            *.tar.gz)         tar xzf $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xf $1         ;;
            *.tbz2)           tar xjf $1        ;;
            *.tgz)            tar xzf $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

killit() {
    # Kills any process that matches a regexp passed to it
    if [ "$1" = "-9" ] ; then
        shift
    fi
    ps aux | grep -v "grep" | grep "$@" | awk '{print $2}' | xargs sudo kill
}

mkdirc() {
    mkdir -p $1 && cd $1
}

tmux_split() {
    tmux new-window -n "$1 panes"
    tmux select-layout 'tiled' > /dev/null
    for i in $(seq 2 $1); do
        tmux split-window
        tmux select-layout 'tiled' > /dev/null
    done
}

function tmux-move-window() {
    tmux move-window -t "$1:"
}

function tmux-move-pane() {
    if [ -n "$1" ]; then
        tmux join-pane -t ":$1"
    else
        tmux break-pane
    fi
}

function swap() {
    if [ "$1" -a "$2" ]; then
        tmp="$1.tmp000"
        mv "$1" "$tmp"
        mv "$2" "$1"
        mv "$tmp" "$2"
    else
        false
    fi
}

gender() {
    if [[ $1 == *"@"* ]]; then
        curl "https://gender-api.com/get?email=$1&ip=auto"
    else
        curl "https://gender-api.com/get?name=$1&ip=auto"
    fi
}

sleepmin() {
    m=`bc <<< "60 * $1"`
    sleep "$m"
}

watch_file() {
    # usage: watch_file "myfile" "command arguments"
    local f="$1"
    local c="$2"
    local a b
    while true; do
        if [[ "$a" != "$b" ]]; then
            eval "$c"
            local a="$b"
        fi
        sleep 1
        local b=`/usr/bin/stat -f%m "$f"`
    done
}

path() {
    echo $( cd "$(dirname "$1")" ; pwd -P )/$(basename "$1")
}

ip() {
    curl https://ipinfo.io/$*
}

